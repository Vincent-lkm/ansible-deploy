---
- name: üöÄ Lancement massif update.sh - 75 groupes Linkuma
  hosts: "{{ target_groups | default('all_linkuma') }}"
  gather_facts: no
  serial: "{{ max_parallel | default(5) }}"  # 5 serveurs en parall√®le par d√©faut
  tasks:
    - name: Pr√©-v√©rifications
      raw: |
        echo "=== PR√â-V√âRIFICATIONS $(hostname) ==="
        echo "üïê D√©but: $(date)"
        
        # V√©rifier l'espace disque
        df -h /mnt/www | grep -v Filesystem
        
        # V√©rifier la charge
        uptime
        
        # V√©rifier que le script existe et est ex√©cutable
        if [ ! -x /mnt/www/update.sh ]; then
            echo "‚ùå Script update.sh manquant ou non ex√©cutable"
            exit 1
        fi
        
        # V√©rifier qu'il n'y a pas d'autre update en cours
        if pgrep -f "update.sh" >/dev/null; then
            echo "‚ö†Ô∏è Un autre update.sh est d√©j√† en cours"
            pgrep -f "update.sh"
            exit 1
        fi
        
        echo "‚úÖ Pr√©-v√©rifications OK"
      register: precheck_result
      
    - name: Afficher pr√©-v√©rifications
      debug:
        msg: "{{ precheck_result.stdout_lines }}"
    
    - name: Lancer update.sh avec monitoring complet
      raw: |
        export LOG_FILE="/mnt/www/log/update-massive-$(date +%Y%m%d-%H%M%S).log"
        mkdir -p /mnt/www/log
        
        echo "=== D√âMARRAGE UPDATE MASSIF - $(date) ===" | tee "$LOG_FILE"
        echo "üñ•Ô∏è Serveur: $(hostname)" | tee -a "$LOG_FILE"  
        echo "üéØ Job: D√©ploiement Massif 75 Groupes" | tee -a "$LOG_FILE"
        echo "üìÅ Log: $LOG_FILE" | tee -a "$LOG_FILE"
        echo "üî¢ Sites WordPress: $(find /mnt/www -maxdepth 2 -name 'wp-config.php' 2>/dev/null | wc -l)" | tee -a "$LOG_FILE"
        echo "‚ö° Parall√©lisme: {{ max_parallel | default(5) }}" | tee -a "$LOG_FILE"
        echo "=============================================" | tee -a "$LOG_FILE"
        
        # Lancer le script avec parall√©lisme optimis√©
        MAX_PARALLEL={{ script_parallel | default(1) }}
        echo "üöÄ Lancement update.sh avec MAX_PARALLEL=$MAX_PARALLEL..." | tee -a "$LOG_FILE"
        
        /mnt/www/update.sh $MAX_PARALLEL 2>&1 | while IFS= read -r line; do
            echo "$(date '+%H:%M:%S') $line" | tee -a "$LOG_FILE"
        done
        
        EXIT_CODE=${PIPESTATUS[0]}
        echo "=============================================" | tee -a "$LOG_FILE"
        echo "=== FIN UPDATE - $(date) - Code: $EXIT_CODE ===" | tee -a "$LOG_FILE"
        echo "üìÅ Log complet: $LOG_FILE" | tee -a "$LOG_FILE"
        
        # Envoyer notification Discord finale pour ce serveur
        if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ $(hostname) - Update termin√© avec succ√®s"
        else
            echo "‚ùå $(hostname) - Update termin√© avec erreurs (code: $EXIT_CODE)"
        fi
        
        exit $EXIT_CODE
      register: update_result
      async: 7200  # 2h timeout
      poll: 0  # Fire & forget pour permettre le parall√©lisme
      
    - name: V√©rification asynchrone du statut
      async_status:
        jid: "{{ update_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 240  # 240 * 30s = 2h max
      delay: 30
      
    - name: Afficher le r√©sum√© final
      debug:
        msg: |
          üéØ Update termin√© sur {{ inventory_hostname }}
          üìä Code de retour: {{ job_result.rc | default('N/A') }}
          ‚è±Ô∏è Dur√©e: ~{{ ((ansible_date_time.epoch | int) - (job_start_time | default(ansible_date_time.epoch | int))) // 60 }}min
          üìÅ Logs d√©taill√©s dans /mnt/www/log/update-massive-*.log
